


## encrypt (add digest):

# create keys:
openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048
chmod 400 private_key.pem
openssl rsa -pubout -in private_key.pem -out public_key.pem

# create digest
openssl dgst -sha256 -sign private_key.pem -out sha_section test_unsigned

# create .sha section in elf header and write digest to sha section
objcopy --add-section .sha=./sha_section ./test_unsigned ./test_signed

# test if the section contains same information
readelf -R .sha ./test_signed
hexdump ./sha_section


## decrypt (verify digest):

# write .sha section (the digest) to a file
objcopy --dump-section .sha=sha_section ./test_signed

# delete .sha section from target file
objcopy --remove-section .sha ./test_signed ./test_unsigned

# verify digest 
openssl dgst -sha256 -verify ./public_key.pem -signature ./sha_section ./test_unsigned





##### __old___ #####

# first get the .sha section from the ELF
#objcopy -j.sha ./test_signed ./sha_section
#objcopy -O binary --set-section-flags .sha=alloc -j.sha ./test_signed ./sha_section

# then unhash the sha section
# openssl enc -aes-256-cbc -in ./sha_section -out ./sha_section_unhashed -d -a

# then decrypt the unhased sha_section with the public key
# openssl rsautl -inkey ./public_key.pem -pubin -in ./sha_section_unhashed -out ./sha_section_decrypted

openssl dgst -d -sha256 -verify ./public_key.pem -signature ./sha_section (...)
